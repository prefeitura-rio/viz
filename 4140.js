"use strict";(self.webpackChunkviz_dados_rio=self.webpackChunkviz_dados_rio||[]).push([[4140],{4140:(e,t,i)=>{i.d(t,{Z:()=>he});var n=i(4942),s=i(8918),o=i(8452),a=i(5522),r=i(3844),l=i(1331),c=i(4088),g=i(744),d=i(9769),u=i(3982),h=i(4912),p=i(1953),f=i(3579),x=i(1469),y=i(8550);const m=()=>{},v={10241:9987,10240:9729,10242:33071,10243:33071};function _(e,t,i,n){return i===t.width&&n===t.height?t:(e.canvas.height=n,e.canvas.width=i,e.clearRect(0,0,e.canvas.width,e.canvas.height),e.drawImage(t,0,0,t.width,t.height,0,0,i,n),e.canvas)}function P(e){return e&&(e.id||e.url)}function C(e,t,i){for(let n=0;n<t.length;n++){const{icon:s,xOffset:o}=t[n];e[P(s)]={...s,x:o,y:i}}}class b{constructor(e,{onUpdate:t=m,onError:i=m}){(0,n.Z)(this,"gl",void 0),(0,n.Z)(this,"onUpdate",void 0),(0,n.Z)(this,"onError",void 0),(0,n.Z)(this,"_loadOptions",null),(0,n.Z)(this,"_texture",null),(0,n.Z)(this,"_externalTexture",null),(0,n.Z)(this,"_mapping",{}),(0,n.Z)(this,"_textureParameters",null),(0,n.Z)(this,"_pendingCount",0),(0,n.Z)(this,"_autoPacking",!1),(0,n.Z)(this,"_xOffset",0),(0,n.Z)(this,"_yOffset",0),(0,n.Z)(this,"_rowHeight",0),(0,n.Z)(this,"_buffer",4),(0,n.Z)(this,"_canvasWidth",1024),(0,n.Z)(this,"_canvasHeight",0),(0,n.Z)(this,"_canvas",null),this.gl=e,this.onUpdate=t,this.onError=i}finalize(){var e;null===(e=this._texture)||void 0===e||e.delete()}getTexture(){return this._texture||this._externalTexture}getIconMapping(e){const t=this._autoPacking?P(e):e;return this._mapping[t]||{}}setProps({loadOptions:e,autoPacking:t,iconAtlas:i,iconMapping:n,textureParameters:s}){var o;e&&(this._loadOptions=e),void 0!==t&&(this._autoPacking=t),n&&(this._mapping=n),i&&(null===(o=this._texture)||void 0===o||o.delete(),this._texture=null,this._externalTexture=i),s&&(this._textureParameters=s)}get isLoaded(){return 0===this._pendingCount}packIcons(e,t){if(!this._autoPacking||"undefined"==typeof document)return;const i=Object.values(function(e,t,i){if(!e||!t)return null;i=i||{};const n={},{iterable:s,objectInfo:o}=(0,y.jB)(e);for(const e of s){o.index++;const s=t(e,o),a=P(s);if(!s)throw new Error("Icon is missing.");if(!s.url)throw new Error("Icon url is missing.");n[a]||i[a]&&s.url===i[a].url||(n[a]={...s,source:e,sourceIndex:o.index})}return n}(e,t,this._mapping)||{});if(i.length>0){const{mapping:e,xOffset:t,yOffset:n,rowHeight:s,canvasHeight:o}=function({icons:e,buffer:t,mapping:i={},xOffset:n=0,yOffset:s=0,rowHeight:o=0,canvasWidth:a}){let r=[];for(let l=0;l<e.length;l++){const c=e[l];if(!i[P(c)]){const{height:e,width:l}=c;n+l+t>a&&(C(i,r,s),n=0,s=o+s+t,o=0,r=[]),r.push({icon:c,xOffset:n}),n=n+l+t,o=Math.max(o,e)}}return r.length>0&&C(i,r,s),{mapping:i,rowHeight:o,xOffset:n,yOffset:s,canvasWidth:a,canvasHeight:(l=o+s+t,Math.pow(2,Math.ceil(Math.log2(l))))};var l}({icons:i,buffer:this._buffer,canvasWidth:this._canvasWidth,mapping:this._mapping,rowHeight:this._rowHeight,xOffset:this._xOffset,yOffset:this._yOffset});this._rowHeight=s,this._mapping=e,this._xOffset=t,this._yOffset=n,this._canvasHeight=o,this._texture||(this._texture=new h.Z(this.gl,{width:this._canvasWidth,height:this._canvasHeight,parameters:this._textureParameters||v})),this._texture.height!==this._canvasHeight&&(this._texture=function(e,t,i,n){const s=e.width,o=e.height,a=new h.Z(e.gl,{width:t,height:i,parameters:n});return(0,p.Lv)(e,a,{targetY:0,width:s,height:o}),e.delete(),a}(this._texture,this._canvasWidth,this._canvasHeight,this._textureParameters||v)),this.onUpdate(),this._canvas=this._canvas||document.createElement("canvas"),this._loadIcons(i)}}_loadIcons(e){const t=this._canvas.getContext("2d");for(const i of e)this._pendingCount++,(0,x.z)(i.url,f.S,this._loadOptions).then((e=>{const n=P(i),{x:s,y:o,width:a,height:r}=this._mapping[n],l=_(t,e,a,r);this._texture.setSubImageData({data:l,x:s,y:o,width:a,height:r}),this._texture.generateMipmap(),this.onUpdate()})).catch((e=>{this.onError({url:i.url,source:i.source,sourceIndex:i.sourceIndex,loadOptions:this._loadOptions,error:e})})).finally((()=>{this._pendingCount--}))}}const S=[0,0,0,255],z={iconAtlas:{type:"image",value:null,async:!0},iconMapping:{type:"object",value:{},async:!0},sizeScale:{type:"number",value:1,min:0},billboard:!0,sizeUnits:"pixels",sizeMinPixels:{type:"number",min:0,value:0},sizeMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},alphaCutoff:{type:"number",value:.05,min:0,max:1},getPosition:{type:"accessor",value:e=>e.position},getIcon:{type:"accessor",value:e=>e.icon},getColor:{type:"accessor",value:S},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]},onIconError:{type:"function",value:null,compare:!1,optional:!0}};class M extends a.Z{constructor(...e){super(...e),(0,n.Z)(this,"state",void 0)}getShaders(){return super.getShaders({vs:'#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\nattribute vec2 instancePixelOffset;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform bool billboard;\nuniform int sizeUnits;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n\n  vec2 iconSize = instanceIconFrames.zw;\n  // convert size in meters to pixels, then scaled and clamp\n \n  // project meters to pixels and clamp to limits \n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits), \n    sizeMinPixels, sizeMaxPixels\n  );\n\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n\n  // scale and rotate vertex in "pixel" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); \n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n\n  vColorMode = instanceColorModes;\n}\n',fs:"#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float alphaCutoff;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n\n  // if colorMode == 0, use pixel color from the texture\n  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < alphaCutoff) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[r.Z,l.Z]})}initializeState(){this.state={iconManager:new b(this.context.gl,{onUpdate:this._onUpdate.bind(this),onError:this._onError.bind(this)})},this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceOffsets:{size:2,accessor:"getIcon",transform:this.getInstanceOffset},instanceIconFrames:{size:4,accessor:"getIcon",transform:this.getInstanceIconFrame},instanceColorModes:{size:1,type:5121,accessor:"getIcon",transform:this.getInstanceColorMode},instanceColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,transition:!0,accessor:"getColor",defaultValue:S},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instancePixelOffset:{size:2,transition:!0,accessor:"getPixelOffset"}})}updateState(e){super.updateState(e);const{props:t,oldProps:i,changeFlags:n}=e,s=this.getAttributeManager(),{iconAtlas:o,iconMapping:a,data:r,getIcon:l,textureParameters:c}=t,{iconManager:g}=this.state,d=o||this.internalState.isAsyncPropLoading("iconAtlas");if(g.setProps({loadOptions:t.loadOptions,autoPacking:!d,iconAtlas:o,iconMapping:d?a:null,textureParameters:c}),d?i.iconMapping!==t.iconMapping&&s.invalidate("getIcon"):(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getIcon))&&g.packIcons(r,l),n.extensionsChanged){var u;const{gl:e}=this.context;null===(u=this.state.model)||void 0===u||u.delete(),this.state.model=this._getModel(e),s.invalidateAll()}}get isLoaded(){return super.isLoaded&&this.state.iconManager.isLoaded}finalizeState(e){super.finalizeState(e),this.state.iconManager.finalize()}draw({uniforms:e}){const{sizeScale:t,sizeMinPixels:i,sizeMaxPixels:n,sizeUnits:s,billboard:o,alphaCutoff:a}=this.props,{iconManager:r}=this.state,l=r.getTexture();l&&this.state.model.setUniforms(e).setUniforms({iconsTexture:l,iconsTextureDim:[l.width,l.height],sizeUnits:c.iI[s],sizeScale:t,sizeMinPixels:i,sizeMaxPixels:n,billboard:o,alphaCutoff:a}).draw()}_getModel(e){return new d.Z(e,{...this.getShaders(),id:this.props.id,geometry:new u.Z({drawMode:6,attributes:{positions:{size:2,value:new Float32Array([-1,-1,-1,1,1,1,1,-1])}}}),isInstanced:!0})}_onUpdate(){this.setNeedsRedraw()}_onError(e){var t;const i=null===(t=this.getCurrentLayer())||void 0===t?void 0:t.props.onIconError;i?i(e):g.Z.error(e.error.message)()}getInstanceOffset(e){const{width:t,height:i,anchorX:n=t/2,anchorY:s=i/2}=this.state.iconManager.getIconMapping(e);return[t/2-n,i/2-s]}getInstanceColorMode(e){return this.state.iconManager.getIconMapping(e).mask?1:0}getInstanceIconFrame(e){const{x:t,y:i,width:n,height:s}=this.state.iconManager.getIconMapping(e);return[t,i,n,s]}}(0,n.Z)(M,"defaultProps",z),(0,n.Z)(M,"layerName","IconLayer");const L=[0,0,0,255],I={radiusUnits:"meters",radiusScale:{type:"number",min:0,value:1},radiusMinPixels:{type:"number",min:0,value:0},radiusMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},lineWidthUnits:"meters",lineWidthScale:{type:"number",min:0,value:1},lineWidthMinPixels:{type:"number",min:0,value:0},lineWidthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},stroked:!1,filled:!0,billboard:!1,antialiasing:!0,getPosition:{type:"accessor",value:e=>e.position},getRadius:{type:"accessor",value:1},getFillColor:{type:"accessor",value:L},getLineColor:{type:"accessor",value:L},getLineWidth:{type:"accessor",value:1},strokeWidth:{deprecatedFor:"getLineWidth"},outline:{deprecatedFor:"stroked"},getColor:{deprecatedFor:["getFillColor","getLineColor"]}};class O extends a.Z{getShaders(){return super.getShaders({vs:"#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n  }\n\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n",fs:"#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[r.Z,l.Z]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceRadius:{size:1,transition:!0,accessor:"getRadius",defaultValue:1},instanceFillColors:{size:this.props.colorFormat.length,transition:!0,normalized:!0,type:5121,accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:this.props.colorFormat.length,transition:!0,normalized:!0,type:5121,accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState(e){if(super.updateState(e),e.changeFlags.extensionsChanged){var t;const{gl:e}=this.context;null===(t=this.state.model)||void 0===t||t.delete(),this.state.model=this._getModel(e),this.getAttributeManager().invalidateAll()}}draw({uniforms:e}){const{radiusUnits:t,radiusScale:i,radiusMinPixels:n,radiusMaxPixels:s,stroked:o,filled:a,billboard:r,antialiasing:l,lineWidthUnits:g,lineWidthScale:d,lineWidthMinPixels:u,lineWidthMaxPixels:h}=this.props;this.state.model.setUniforms(e).setUniforms({stroked:o?1:0,filled:a,billboard:r,antialiasing:l,radiusUnits:c.iI[t],radiusScale:i,radiusMinPixels:n,radiusMaxPixels:s,lineWidthUnits:c.iI[g],lineWidthScale:d,lineWidthMinPixels:u,lineWidthMaxPixels:h}).draw()}_getModel(e){return new d.Z(e,{...this.getShaders(),id:this.props.id,geometry:new u.Z({drawMode:6,vertexCount:4,attributes:{positions:{size:3,value:new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0])}}}),isInstanced:!0})}}(0,n.Z)(O,"defaultProps",I),(0,n.Z)(O,"layerName","ScatterplotLayer");const F=[];class w extends M{constructor(...e){super(...e),(0,n.Z)(this,"state",void 0)}getShaders(){return{...super.getShaders(),fs:"#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float gamma;\nuniform bool sdf;\nuniform float alphaCutoff;\nuniform float buffer;\nuniform float outlineBuffer;\nuniform vec4 outlineColor;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (!picking_uActive) {\n    float alpha = texture2D(iconsTexture, vTextureCoords).a;\n    vec4 color = vColor;\n\n    // if enable sdf (signed distance fields)\n    if (sdf) {\n      float distance = alpha;\n      alpha = smoothstep(buffer - gamma, buffer + gamma, distance);\n\n      if (outlineBuffer > 0.0) {\n        float inFill = alpha;\n        float inBorder = smoothstep(outlineBuffer - gamma, outlineBuffer + gamma, distance);\n        color = mix(outlineColor, vColor, inFill);\n        alpha = inBorder;\n      }\n    }\n\n    // Take the global opacity and the alpha from color into account for the alpha component\n    float a = alpha * color.a;\n    \n    if (a < alphaCutoff) {\n      discard;\n    }\n\n    gl_FragColor = vec4(color.rgb, a * opacity);\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n"}}initializeState(){super.initializeState(),this.getAttributeManager().addInstanced({instanceOffsets:{size:2,accessor:"getIconOffsets"},instancePickingColors:{type:5121,size:3,accessor:(e,{index:t,target:i})=>this.encodePickingColor(t,i)}})}updateState(e){super.updateState(e);const{props:t,oldProps:i}=e;let{outlineColor:n}=t;n!==i.outlineColor&&(n=n.map((e=>e/255)),n[3]=Number.isFinite(n[3])?n[3]:1,this.setState({outlineColor:n})),!t.sdf&&t.outlineWidth&&g.Z.warn("".concat(this.id,": fontSettings.sdf is required to render outline"))()}draw(e){const{sdf:t,smoothing:i,outlineWidth:n}=this.props,{outlineColor:s}=this.state;e.uniforms={...e.uniforms,buffer:.75,outlineBuffer:n?Math.max(i,.75*(1-n)):-1,gamma:i,sdf:Boolean(t),outlineColor:s},super.draw(e)}getInstanceOffset(e){return e?Array.from(e).flatMap((e=>super.getInstanceOffset(e))):F}getInstanceColorMode(e){return 1}getInstanceIconFrame(e){return e?Array.from(e).flatMap((e=>super.getInstanceIconFrame(e))):F}}(0,n.Z)(w,"defaultProps",{getIconOffsets:{type:"accessor",value:e=>e.offsets},alphaCutoff:.001,smoothing:.1,outlineWidth:0,outlineColor:{type:"color",value:[0,0,0,255]}}),(0,n.Z)(w,"layerName","MultiIconLayer");var A=i(9296),T=i.n(A);const k=32,W=[];function E(e,t,i,n){let s=0;for(let a=t;a<i;a++){var o;s+=(null===(o=n[e[a]])||void 0===o?void 0:o.width)||0}return s}function R(e,t,i,n,s,o){let a=t,r=0;for(let l=t;l<i;l++){const t=E(e,l,l+1,s);r+t>n&&(a<l&&o.push(l),a=l,r=0),r+=t}return r}function B(e,t,i,n,s=0,o){void 0===o&&(o=e.length);const a=[];return"break-all"===t?R(e,s,o,i,n,a):function(e,t,i,n,s,o){let a=t,r=t,l=t,c=0;for(let g=t;g<i;g++)if(" "===e[g]?l=g+1:" "!==e[g+1]&&g+1!==i||(l=g+1),l>r){let t=E(e,r,l,s);c+t>n&&(a<r&&(o.push(r),a=r,c=0),t>n&&(t=R(e,r,l,n,s,o),a=o[o.length-1])),r=l,c+=t}}(e,s,o,i,n,a),a}function Z(e,t,i,n,s,o){let a=0,r=0;for(let o=t;o<i;o++){const t=e[o],i=n[t];i?(r||(r=i.height),s[o]=a+i.width/2,a+=i.width):(g.Z.warn("Missing character: ".concat(t," (").concat(t.codePointAt(0),")"))(),s[o]=a,a+=k)}o[0]=a,o[1]=r}function U(e,t,i,n,s){const o=Array.from(e),a=o.length,r=new Array(a),l=new Array(a),c=new Array(a),g=("break-word"===i||"break-all"===i)&&isFinite(n)&&n>0,d=[0,0],u=[0,0];let h=0,p=0,f=0;for(let e=0;e<=a;e++){const x=o[e];if("\n"!==x&&e!==a||(f=e),f>p){const e=g?B(o,i,n,s,p,f):W;for(let i=0;i<=e.length;i++){const n=0===i?p:e[i-1],a=i<e.length?e[i]:f;Z(o,n,a,s,r,u);for(let e=n;e<a;e++)l[e]=h+u[1]/2,c[e]=u[0];h+=u[1]*t,d[0]=Math.max(d[0],u[0])}p=f}"\n"===x&&(r[p]=0,l[p]=0,c[p]=0,p++)}return d[1]=h,{x:r,y:l,rowWidth:c,size:d}}class D{constructor(e=5){(0,n.Z)(this,"limit",void 0),(0,n.Z)(this,"_cache",{}),(0,n.Z)(this,"_order",[]),this.limit=e}get(e){const t=this._cache[e];return t&&(this._deleteOrder(e),this._appendOrder(e)),t}set(e,t){this._cache[e]?(this.delete(e),this._cache[e]=t,this._appendOrder(e)):(Object.keys(this._cache).length===this.limit&&this.delete(this._order[0]),this._cache[e]=t,this._appendOrder(e))}delete(e){this._cache[e]&&(delete this._cache[e],this._deleteOrder(e))}_deleteOrder(e){const t=this._order.indexOf(e);t>=0&&this._order.splice(t,1)}_appendOrder(e){this._order.push(e)}}const N={fontFamily:"Monaco, monospace",fontWeight:"normal",characterSet:function(){const e=[];for(let t=32;t<128;t++)e.push(String.fromCharCode(t));return e}(),fontSize:64,buffer:4,sdf:!1,cutoff:.25,radius:12,smoothing:.1};let H=new D(3);function G(e,t){for(let i=0;i<e.length;i++)t.data[4*i+3]=e[i]}function j(e,t,i,n){e.font="".concat(n," ").concat(i,"px ").concat(t),e.fillStyle="#000",e.textBaseline="alphabetic",e.textAlign="left"}class K{constructor(){(0,n.Z)(this,"props",{...N}),(0,n.Z)(this,"_key",void 0),(0,n.Z)(this,"_atlas",void 0)}get texture(){return this._atlas}get mapping(){return this._atlas&&this._atlas.mapping}get scale(){return 1.2}setProps(e={}){Object.assign(this.props,e);const t=this._key;this._key=this._getKey();const i=function(e,t){let i;i="string"==typeof t?new Set(Array.from(t)):new Set(t);const n=H.get(e);if(!n)return i;for(const e in n.mapping)i.has(e)&&i.delete(e);return i}(this._key,this.props.characterSet),n=H.get(this._key);if(n&&0===i.size)return void(this._key!==t&&(this._atlas=n));const s=this._generateFontAtlas(this._key,i,n);this._atlas=s,H.set(this._key,s)}_generateFontAtlas(e,t,i){const{fontFamily:n,fontWeight:s,fontSize:o,buffer:a,sdf:r,radius:l,cutoff:c}=this.props;let g=i&&i.data;g||(g=document.createElement("canvas"),g.width=1024);const d=g.getContext("2d");j(d,n,o,s);const{mapping:u,canvasHeight:h,xOffset:p,yOffset:f}=function({characterSet:e,getFontWidth:t,fontHeight:i,buffer:n,maxCanvasWidth:s,mapping:o={},xOffset:a=0,yOffset:r=0}){let l=0,c=a;for(const a of e)if(!o[a]){const e=t(a);c+e+2*n>s&&(c=0,l++),o[a]={x:c+n,y:r+l*(i+2*n)+n,width:e,height:i},c+=e+2*n}const g=i+2*n;return{mapping:o,xOffset:c,yOffset:r+l*g,canvasHeight:(d=r+(l+1)*g,Math.pow(2,Math.ceil(Math.log2(d))))};var d}({getFontWidth:e=>d.measureText(e).width,fontHeight:1.2*o,buffer:a,characterSet:t,maxCanvasWidth:1024,...i&&{mapping:i.mapping,xOffset:i.xOffset,yOffset:i.yOffset}});if(g.height!==h){const e=d.getImageData(0,0,g.width,g.height);g.height=h,d.putImageData(e,0,0)}if(j(d,n,o,s),r){const e=new(T())(o,a,l,c,n,s),i=d.getImageData(0,0,e.size,e.size);for(const n of t)G(e.draw(n),i),d.putImageData(i,u[n].x-a,u[n].y+a)}else for(const e of t)d.fillText(e,u[e].x,u[e].y+.9*o);return{xOffset:p,yOffset:f,mapping:u,data:g,width:g.width,height:g.height}}_getKey(){const{fontFamily:e,fontWeight:t,fontSize:i,buffer:n,sdf:s,radius:o,cutoff:a}=this.props;return s?"".concat(e," ").concat(t," ").concat(i," ").concat(n," ").concat(o," ").concat(a):"".concat(e," ").concat(t," ").concat(i," ").concat(n)}}const V={billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,padding:{type:"array",value:[0,0,0,0]},getPosition:{type:"accessor",value:e=>e.position},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]},getBoundingRect:{type:"accessor",value:[0,0,0,0]},getFillColor:{type:"accessor",value:[0,0,0,255]},getLineColor:{type:"accessor",value:[0,0,0,255]},getLineWidth:{type:"accessor",value:1}};class J extends a.Z{constructor(...e){super(...e),(0,n.Z)(this,"state",void 0)}getShaders(){return super.getShaders({vs:"#define SHADER_NAME text-background-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec4 instanceRects;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec2 instancePixelOffsets;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform bool billboard;\nuniform float opacity;\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform vec4 padding;\nuniform int sizeUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = radians(angle);\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n  vLineWidth = instanceLineWidths;\n\n  // convert size in meters to pixels, then scaled and clamp\n\n  // project meters to pixels and clamp to limits\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),\n    sizeMinPixels, sizeMaxPixels\n  );\n\n  dimensions = instanceRects.zw * sizePixels + padding.xy + padding.zw;\n\n  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-padding.xy, padding.zw, positions);\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);\n  pixelOffset += instancePixelOffsets;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n",fs:"#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec2 pixelPosition = uv * dimensions;\n  if (stroked) {\n    float distToEdge = min(\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\n    );\n    float isBorder = smoothedge(distToEdge, vLineWidth);\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[r.Z,l.Z]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instanceRects:{size:4,accessor:"getBoundingRect"},instancePixelOffsets:{size:2,transition:!0,accessor:"getPixelOffset"},instanceFillColors:{size:4,transition:!0,normalized:!0,type:5121,accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:4,transition:!0,normalized:!0,type:5121,accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState(e){super.updateState(e);const{changeFlags:t}=e;if(t.extensionsChanged){var i;const{gl:e}=this.context;null===(i=this.state.model)||void 0===i||i.delete(),this.state.model=this._getModel(e),this.getAttributeManager().invalidateAll()}}draw({uniforms:e}){const{billboard:t,sizeScale:i,sizeUnits:n,sizeMinPixels:s,sizeMaxPixels:o,getLineWidth:a}=this.props;let{padding:r}=this.props;r.length<4&&(r=[r[0],r[1],r[0],r[1]]),this.state.model.setUniforms(e).setUniforms({billboard:t,stroked:Boolean(a),padding:r,sizeUnits:c.iI[n],sizeScale:i,sizeMinPixels:s,sizeMaxPixels:o}).draw()}_getModel(e){return new d.Z(e,{...this.getShaders(),id:this.props.id,geometry:new u.Z({drawMode:6,vertexCount:4,attributes:{positions:{size:2,value:new Float32Array([0,0,1,0,1,1,0,1])}}}),isInstanced:!0})}}(0,n.Z)(J,"defaultProps",V),(0,n.Z)(J,"layerName","TextBackgroundLayer");const X={start:1,middle:0,end:-1},q={top:1,center:0,bottom:-1},Y=[0,0,0,255],Q={billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,background:!1,getBackgroundColor:{type:"accessor",value:[255,255,255,255]},getBorderColor:{type:"accessor",value:Y},getBorderWidth:{type:"accessor",value:0},backgroundPadding:{type:"array",value:[0,0,0,0]},characterSet:{type:"object",value:N.characterSet},fontFamily:N.fontFamily,fontWeight:N.fontWeight,lineHeight:1,outlineWidth:{type:"number",value:0,min:0},outlineColor:{type:"color",value:Y},fontSettings:{},wordBreak:"break-word",maxWidth:{type:"number",value:-1},getText:{type:"accessor",value:e=>e.text},getPosition:{type:"accessor",value:e=>e.position},getColor:{type:"accessor",value:Y},getSize:{type:"accessor",value:32},getAngle:{type:"accessor",value:0},getTextAnchor:{type:"accessor",value:"middle"},getAlignmentBaseline:{type:"accessor",value:"center"},getPixelOffset:{type:"accessor",value:[0,0]},backgroundColor:{deprecatedFor:["background","getBackgroundColor"]}};class $ extends s.Z{constructor(...e){super(...e),(0,n.Z)(this,"state",void 0),(0,n.Z)(this,"getBoundingRect",((e,t)=>{const i=this.state.fontAtlasManager.mapping,n=this.state.getText,{wordBreak:s,maxWidth:o,lineHeight:a,getTextAnchor:r,getAlignmentBaseline:l}=this.props,c=n(e,t)||"",{size:[g,d]}=U(c,a,s,o,i);return[(X["function"==typeof r?r(e,t):r]-1)*g/2,(q["function"==typeof l?l(e,t):l]-1)*d/2,g,d]})),(0,n.Z)(this,"getIconOffsets",((e,t)=>{const i=this.state.fontAtlasManager.mapping,n=this.state.getText,{wordBreak:s,maxWidth:o,lineHeight:a,getTextAnchor:r,getAlignmentBaseline:l}=this.props,c=n(e,t)||"",{x:g,y:d,rowWidth:u,size:[h,p]}=U(c,a,s,o,i),f=X["function"==typeof r?r(e,t):r],x=q["function"==typeof l?l(e,t):l],y=g.length,m=new Array(2*y);let v=0;for(let e=0;e<y;e++){const t=(1-f)*(h-u[e])/2;m[v++]=(f-1)*h/2+t+g[e],m[v++]=(x-1)*p/2+d[e]}return m}))}initializeState(){this.state={styleVersion:0,fontAtlasManager:new K}}updateState(e){const{props:t,oldProps:i,changeFlags:n}=e;(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getText))&&this._updateText(),(this._updateFontAtlas()||t.lineHeight!==i.lineHeight||t.wordBreak!==i.wordBreak||t.maxWidth!==i.maxWidth)&&this.setState({styleVersion:this.state.styleVersion+1})}getPickingInfo({info:e}){return e.object=e.index>=0?this.props.data[e.index]:null,e}_updateFontAtlas(){const{fontSettings:e,fontFamily:t,fontWeight:i}=this.props,{fontAtlasManager:n,characterSet:s}=this.state,o={...e,characterSet:s,fontFamily:t,fontWeight:i};if(!n.mapping)return n.setProps(o),!0;for(const e in o)if(o[e]!==n.props[e])return n.setProps(o),!0;return!1}_updateText(){var e;const{data:t,characterSet:i}=this.props,n=null===(e=t.attributes)||void 0===e?void 0:e.getText;let s,{getText:o}=this.props,a=t.startIndices;const r="auto"===i&&new Set;if(n&&a){const{texts:e,characterCount:i}=function({value:e,length:t,stride:i,offset:n,startIndices:s,characterSet:o}){const a=e.BYTES_PER_ELEMENT,r=i?i/a:1,l=n?n/a:0,c=s[t]||Math.ceil((e.length-l)/r),g=o&&new Set,d=new Array(t);let u=e;if(r>1||l>0){u=new(0,e.constructor)(c);for(let t=0;t<c;t++)u[t]=e[t*r+l]}for(let e=0;e<t;e++){const t=s[e],i=s[e+1]||c,n=u.subarray(t,i);d[e]=String.fromCodePoint.apply(null,n),g&&n.forEach(g.add,g)}if(g)for(const e of g)o.add(String.fromCodePoint(e));return{texts:d,characterCount:c}}({...ArrayBuffer.isView(n)?{value:n}:n,length:t.length,startIndices:a,characterSet:r});s=i,o=(t,{index:i})=>e[i]}else{const{iterable:e,objectInfo:i}=(0,y.jB)(t);a=[0],s=0;for(const t of e){i.index++;const e=Array.from(o(t,i)||"");r&&e.forEach(r.add,r),s+=e.length,a.push(s)}}this.setState({getText:o,startIndices:a,numInstances:s,characterSet:r||i})}renderLayers(){const{startIndices:e,numInstances:t,getText:i,fontAtlasManager:{scale:n,texture:s,mapping:o},styleVersion:a}=this.state,{data:r,_dataDiff:l,getPosition:c,getColor:g,getSize:d,getAngle:u,getPixelOffset:h,getBackgroundColor:p,getBorderColor:f,getBorderWidth:x,backgroundPadding:y,background:m,billboard:v,fontSettings:_,outlineWidth:P,outlineColor:C,sizeScale:b,sizeUnits:S,sizeMinPixels:z,sizeMaxPixels:M,transitions:L,updateTriggers:I}=this.props,O=this.getSubLayerClass("characters",w),F=this.getSubLayerClass("background",J);return[m&&new F({getFillColor:p,getLineColor:f,getLineWidth:x,padding:y,getPosition:c,getSize:d,getAngle:u,getPixelOffset:h,billboard:v,sizeScale:b/this.state.fontAtlasManager.props.fontSize,sizeUnits:S,sizeMinPixels:z,sizeMaxPixels:M,transitions:L&&{getPosition:L.getPosition,getAngle:L.getAngle,getSize:L.getSize,getFillColor:L.getBackgroundColor,getLineColor:L.getBorderColor,getLineWidth:L.getBorderWidth,getPixelOffset:L.getPixelOffset}},this.getSubLayerProps({id:"background",updateTriggers:{getPosition:I.getPosition,getAngle:I.getAngle,getSize:I.getSize,getFillColor:I.getBackgroundColor,getLineColor:I.getBorderColor,getLineWidth:I.getBorderWidth,getPixelOffset:I.getPixelOffset,getBoundingRect:{getText:I.getText,getTextAnchor:I.getTextAnchor,getAlignmentBaseline:I.getAlignmentBaseline,styleVersion:a}}}),{data:r.attributes&&r.attributes.background?{length:r.length,attributes:r.attributes.background}:r,_dataDiff:l,autoHighlight:!1,getBoundingRect:this.getBoundingRect}),new O({sdf:_.sdf,smoothing:Number.isFinite(_.smoothing)?_.smoothing:N.smoothing,outlineWidth:P,outlineColor:C,iconAtlas:s,iconMapping:o,getPosition:c,getColor:g,getSize:d,getAngle:u,getPixelOffset:h,billboard:v,sizeScale:b*n,sizeUnits:S,sizeMinPixels:z*n,sizeMaxPixels:M*n,transitions:L&&{getPosition:L.getPosition,getAngle:L.getAngle,getColor:L.getColor,getSize:L.getSize,getPixelOffset:L.getPixelOffset}},this.getSubLayerProps({id:"characters",updateTriggers:{getIcon:I.getText,getPosition:I.getPosition,getAngle:I.getAngle,getColor:I.getColor,getSize:I.getSize,getPixelOffset:I.getPixelOffset,getIconOffsets:{getText:I.getText,getTextAnchor:I.getTextAnchor,getAlignmentBaseline:I.getAlignmentBaseline,styleVersion:a}}}),{data:r,_dataDiff:l,startIndices:e,numInstances:t,getIconOffsets:this.getIconOffsets,getIcon:i})]}static set fontAtlasCacheLimit(e){!function(e){g.Z.assert(Number.isFinite(e)&&e>=3,"Invalid cache limit"),H=new D(e)}(e)}}(0,n.Z)($,"defaultProps",Q),(0,n.Z)($,"layerName","TextLayer");var ee=i(2112),te=i(1435);const ie={circle:{type:O,props:{filled:"filled",stroked:"stroked",lineWidthMaxPixels:"lineWidthMaxPixels",lineWidthMinPixels:"lineWidthMinPixels",lineWidthScale:"lineWidthScale",lineWidthUnits:"lineWidthUnits",pointRadiusMaxPixels:"radiusMaxPixels",pointRadiusMinPixels:"radiusMinPixels",pointRadiusScale:"radiusScale",pointRadiusUnits:"radiusUnits",pointAntialiasing:"antialiasing",pointBillboard:"billboard",getFillColor:"getFillColor",getLineColor:"getLineColor",getLineWidth:"getLineWidth",getPointRadius:"getRadius"}},icon:{type:M,props:{iconAtlas:"iconAtlas",iconMapping:"iconMapping",iconSizeMaxPixels:"sizeMaxPixels",iconSizeMinPixels:"sizeMinPixels",iconSizeScale:"sizeScale",iconSizeUnits:"sizeUnits",iconAlphaCutoff:"alphaCutoff",iconBillboard:"billboard",getIcon:"getIcon",getIconAngle:"getAngle",getIconColor:"getColor",getIconPixelOffset:"getPixelOffset",getIconSize:"getSize"}},text:{type:$,props:{textSizeMaxPixels:"sizeMaxPixels",textSizeMinPixels:"sizeMinPixels",textSizeScale:"sizeScale",textSizeUnits:"sizeUnits",textBackground:"background",textBackgroundPadding:"backgroundPadding",textFontFamily:"fontFamily",textFontWeight:"fontWeight",textLineHeight:"lineHeight",textMaxWidth:"maxWidth",textOutlineColor:"outlineColor",textOutlineWidth:"outlineWidth",textWordBreak:"wordBreak",textCharacterSet:"characterSet",textBillboard:"billboard",textFontSettings:"fontSettings",getText:"getText",getTextAngle:"getAngle",getTextColor:"getColor",getTextPixelOffset:"getPixelOffset",getTextSize:"getSize",getTextAnchor:"getTextAnchor",getTextAlignmentBaseline:"getAlignmentBaseline",getTextBackgroundColor:"getBackgroundColor",getTextBorderColor:"getBorderColor",getTextBorderWidth:"getBorderWidth"}}},ne={type:ee.Z,props:{lineWidthUnits:"widthUnits",lineWidthScale:"widthScale",lineWidthMinPixels:"widthMinPixels",lineWidthMaxPixels:"widthMaxPixels",lineJointRounded:"jointRounded",lineCapRounded:"capRounded",lineMiterLimit:"miterLimit",lineBillboard:"billboard",getLineColor:"getColor",getLineWidth:"getWidth"}},se={type:te.Z,props:{extruded:"extruded",filled:"filled",wireframe:"wireframe",elevationScale:"elevationScale",material:"material",getElevation:"getElevation",getFillColor:"getFillColor",getLineColor:"getLineColor"}};function oe({type:e,props:t}){const i={};for(const n in t)i[n]=e.defaultProps[t[n]];return i}function ae(e,t){const{transitions:i,updateTriggers:n}=e.props,s={updateTriggers:{},transitions:i&&{getPosition:i.geometry}};for(const o in t){const a=t[o];let r=e.props[o];o.startsWith("get")&&(r=e.getSubLayerAccessor(r),s.updateTriggers[a]=n[o],i&&(s.transitions[a]=i[o])),s[a]=r}return s}function re(e,t,i={}){const n={pointFeatures:[],lineFeatures:[],polygonFeatures:[],polygonOutlineFeatures:[]},{startRow:s=0,endRow:o=e.length}=i;for(let i=s;i<o;i++){const s=e[i],{geometry:o}=s;if(o)if("GeometryCollection"===o.type){g.Z.assert(Array.isArray(o.geometries),"GeoJSON does not have geometries array");const{geometries:e}=o;for(let o=0;o<e.length;o++)le(e[o],n,t,s,i)}else le(o,n,t,s,i)}return n}function le(e,t,i,n,s){const{type:o,coordinates:a}=e,{pointFeatures:r,lineFeatures:l,polygonFeatures:c,polygonOutlineFeatures:d}=t;if(function(e,t){let i=ce[e];for(g.Z.assert(i,"Unknown GeoJSON type ".concat(e));t&&--i>0;)t=t[0];return t&&Number.isFinite(t[0])}(o,a))switch(o){case"Point":r.push(i({geometry:e},n,s));break;case"MultiPoint":a.forEach((e=>{r.push(i({geometry:{type:"Point",coordinates:e}},n,s))}));break;case"LineString":l.push(i({geometry:e},n,s));break;case"MultiLineString":a.forEach((e=>{l.push(i({geometry:{type:"LineString",coordinates:e}},n,s))}));break;case"Polygon":c.push(i({geometry:e},n,s)),a.forEach((e=>{d.push(i({geometry:{type:"LineString",coordinates:e}},n,s))}));break;case"MultiPolygon":a.forEach((e=>{c.push(i({geometry:{type:"Polygon",coordinates:e}},n,s)),e.forEach((e=>{d.push(i({geometry:{type:"LineString",coordinates:e}},n,s))}))}))}else g.Z.warn("".concat(o," coordinates are malformed"))()}const ce={Point:1,MultiPoint:2,LineString:2,MultiLineString:3,Polygon:3,MultiPolygon:4};function ge(e){return e.geometry.coordinates}const de=["points","linestrings","polygons"],ue={...oe(ie.circle),...oe(ie.icon),...oe(ie.text),...oe(ne),...oe(se),stroked:!0,filled:!0,extruded:!1,wireframe:!1,iconAtlas:{type:"object",value:null},iconMapping:{type:"object",value:{}},getIcon:{type:"accessor",value:e=>e.properties.icon},getText:{type:"accessor",value:e=>e.properties.text},pointType:"circle",getRadius:{deprecatedFor:"getPointRadius"}};class he extends s.Z{initializeState(){this.state={layerProps:{},features:{}}}updateState({props:e,changeFlags:t}){if(!t.dataChanged)return;const{data:i}=this.props,n=i&&"points"in i&&"polygons"in i&&"lines"in i;this.setState({binary:n}),n?this._updateStateBinary({props:e,changeFlags:t}):this._updateStateJSON({props:e,changeFlags:t})}_updateStateBinary({props:e,changeFlags:t}){const i=function(e,t){const i={points:{},lines:{},polygons:{},polygonsOutline:{}},{points:n,lines:s,polygons:o}=e,a=function(e,t){const i={points:null,lines:null,polygons:null};for(const n in i){const s=e[n].globalFeatureIds.value;i[n]=new Uint8ClampedArray(3*s.length);const o=[];for(let e=0;e<s.length;e++)t(s[e],o),i[n][3*e+0]=o[0],i[n][3*e+1]=o[1],i[n][3*e+2]=o[2]}return i}(e,t);return i.points.data={length:n.positions.value.length/n.positions.size,attributes:{...n.attributes,getPosition:n.positions,instancePickingColors:{size:3,value:a.points}},properties:n.properties,numericProps:n.numericProps,featureIds:n.featureIds},i.lines.data={length:s.pathIndices.value.length-1,startIndices:s.pathIndices.value,attributes:{...s.attributes,getPath:s.positions,instancePickingColors:{size:3,value:a.lines}},properties:s.properties,numericProps:s.numericProps,featureIds:s.featureIds},i.lines._pathType="open",i.polygons.data={length:o.polygonIndices.value.length-1,startIndices:o.polygonIndices.value,attributes:{...o.attributes,getPolygon:o.positions,pickingColors:{size:3,value:a.polygons}},properties:o.properties,numericProps:o.numericProps,featureIds:o.featureIds},i.polygons._normalize=!1,o.triangles&&(i.polygons.data.attributes.indices=o.triangles.value),i.polygonsOutline.data={length:o.primitivePolygonIndices.value.length-1,startIndices:o.primitivePolygonIndices.value,attributes:{...o.attributes,getPath:o.positions,instancePickingColors:{size:3,value:a.polygons}},properties:o.properties,numericProps:o.numericProps,featureIds:o.featureIds},i.polygonsOutline._pathType="open",i}(e.data,this.encodePickingColor);this.setState({layerProps:i})}_updateStateJSON({props:e,changeFlags:t}){const i=function(e){if(Array.isArray(e))return e;switch(g.Z.assert(e.type,"GeoJSON does not have type"),e.type){case"Feature":return[e];case"FeatureCollection":return g.Z.assert(Array.isArray(e.features),"GeoJSON does not have features array"),e.features;default:return[{geometry:e}]}}(e.data),n=this.getSubLayerRow.bind(this);let s={};const a={};if(Array.isArray(t.dataChanged)){const e=this.state.features;for(const t in e)s[t]=e[t].slice(),a[t]=[];for(const r of t.dataChanged){const t=re(i,n,r);for(const i in e)a[i].push((0,o.b)({data:s[i],getIndex:e=>e.__source.index,dataRange:r,replace:t[i]}))}}else s=re(i,n);const r=function(e,t){const i={points:{},lines:{},polygons:{},polygonsOutline:{}},{pointFeatures:n,lineFeatures:s,polygonFeatures:o,polygonOutlineFeatures:a}=e;return i.points.data=n,i.points._dataDiff=t.pointFeatures&&(()=>t.pointFeatures),i.points.getPosition=ge,i.lines.data=s,i.lines._dataDiff=t.lineFeatures&&(()=>t.lineFeatures),i.lines.getPath=ge,i.polygons.data=o,i.polygons._dataDiff=t.polygonFeatures&&(()=>t.polygonFeatures),i.polygons.getPolygon=ge,i.polygonsOutline.data=a,i.polygonsOutline._dataDiff=t.polygonOutlineFeatures&&(()=>t.polygonOutlineFeatures),i.polygonsOutline.getPath=ge,i}(s,a);this.setState({features:s,featuresDiff:a,layerProps:r})}getPickingInfo(e){const t=super.getPickingInfo(e),{index:i,sourceLayer:n}=t;return t.featureType=de.find((e=>n.id.startsWith("".concat(this.id,"-").concat(e,"-")))),i>=0&&n.id.startsWith("".concat(this.id,"-points-text"))&&this.state.binary&&(t.index=this.props.data.points.globalFeatureIds.value[i]),t}_updateAutoHighlight(e){const t="".concat(this.id,"-points-"),i="points"===e.featureType;for(const n of this.getSubLayers())n.id.startsWith(t)===i&&n.updateAutoHighlight(e)}_renderPolygonLayer(){const{extruded:e,wireframe:t}=this.props,{layerProps:i}=this.state,n="polygons-fill",s=this.shouldRenderSubLayer(n,i.polygons.data)&&this.getSubLayerClass(n,se.type);if(s){const o=ae(this,se.props),a=e&&t;return a||delete o.getLineColor,o.updateTriggers.lineColors=a,new s(o,this.getSubLayerProps({id:n,updateTriggers:o.updateTriggers}),i.polygons)}return null}_renderLineLayers(){const{extruded:e,stroked:t}=this.props,{layerProps:i}=this.state,n="polygons-stroke",s="linestrings",o=!e&&t&&this.shouldRenderSubLayer(n,i.polygonsOutline.data)&&this.getSubLayerClass(n,ne.type),a=this.shouldRenderSubLayer(s,i.lines.data)&&this.getSubLayerClass(s,ne.type);if(o||a){const e=ae(this,ne.props);return[o&&new o(e,this.getSubLayerProps({id:n,updateTriggers:e.updateTriggers}),i.polygonsOutline),a&&new a(e,this.getSubLayerProps({id:s,updateTriggers:e.updateTriggers}),i.lines)]}return null}_renderPointLayers(){const{pointType:e}=this.props,{layerProps:t,binary:i}=this.state;let{highlightedObjectIndex:n}=this.props;!i&&Number.isFinite(n)&&(n=t.points.data.findIndex((e=>e.__source.index===n)));const s=new Set(e.split("+")),o=[];for(const e of s){const s="points-".concat(e),a=ie[e],r=a&&this.shouldRenderSubLayer(s,t.points.data)&&this.getSubLayerClass(s,a.type);if(r){const l=ae(this,a.props);let c=t.points;if("text"===e&&i){const{instancePickingColors:e,...t}=c.data.attributes;c={...c,data:{...c.data,attributes:t}}}o.push(new r(l,this.getSubLayerProps({id:s,updateTriggers:l.updateTriggers,highlightedObjectIndex:n}),c))}}return o}renderLayers(){const{extruded:e}=this.props,t=this._renderPolygonLayer();return[!e&&t,this._renderLineLayers(),this._renderPointLayers(),e&&t]}getSubLayerAccessor(e){const{binary:t}=this.state;return t&&"function"==typeof e?(t,i)=>{const{data:n,index:s}=i,o=function(e,t){if(!e)return null;const i="startIndices"in e?e.startIndices[t]:t,n=e.featureIds.value[i];return-1!==i?function(e,t,i){const n={properties:{...e.properties[t]}};for(const t in e.numericProps)n.properties[t]=e.numericProps[t].value[i];return n}(e,n,i):null}(n,s);return e(o,i)}:super.getSubLayerAccessor(e)}}(0,n.Z)(he,"layerName","GeoJsonLayer"),(0,n.Z)(he,"defaultProps",ue)},9296:e=>{e.exports=i,e.exports.default=i;var t=1e20;function i(e,t,i,n,s,o){this.fontSize=e||24,this.buffer=void 0===t?3:t,this.cutoff=n||.25,this.fontFamily=s||"sans-serif",this.fontWeight=o||"normal",this.radius=i||8;var a=this.size=this.fontSize+2*this.buffer,r=a+2*this.buffer;this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=a,this.ctx=this.canvas.getContext("2d"),this.ctx.font=this.fontWeight+" "+this.fontSize+"px "+this.fontFamily,this.ctx.textAlign="left",this.ctx.fillStyle="black",this.gridOuter=new Float64Array(r*r),this.gridInner=new Float64Array(r*r),this.f=new Float64Array(r),this.z=new Float64Array(r+1),this.v=new Uint16Array(r),this.useMetrics=void 0!==this.ctx.measureText("A").actualBoundingBoxLeft,this.middle=Math.round(a/2*(navigator.userAgent.indexOf("Gecko/")>=0?1.2:1))}function n(e,t,i,n,o,a){for(var r=0;r<t;r++)s(e,r,t,i,n,o,a);for(var l=0;l<i;l++)s(e,l*t,1,t,n,o,a)}function s(e,i,n,s,o,a,r){var l,c,g,d;for(a[0]=0,r[0]=-t,r[1]=t,l=0;l<s;l++)o[l]=e[i+l*n];for(l=1,c=0,g=0;l<s;l++){do{d=a[c],g=(o[l]-o[d]+l*l-d*d)/(l-d)/2}while(g<=r[c]&&--c>-1);a[++c]=l,r[c]=g,r[c+1]=t}for(l=0,c=0;l<s;l++){for(;r[c+1]<l;)c++;d=a[c],e[i+l*n]=o[d]+(l-d)*(l-d)}}i.prototype._draw=function(e,i){var s,o,a,r,l,c,g,d,u,h=this.ctx.measureText(e),p=h.width,f=2*this.buffer;i&&this.useMetrics?(l=Math.floor(h.actualBoundingBoxAscent),d=this.buffer+Math.ceil(h.actualBoundingBoxAscent),c=this.buffer,g=this.buffer,s=(o=Math.min(this.size,Math.ceil(h.actualBoundingBoxRight-h.actualBoundingBoxLeft)))+f,a=(r=Math.min(this.size-c,Math.ceil(h.actualBoundingBoxAscent+h.actualBoundingBoxDescent)))+f,this.ctx.textBaseline="alphabetic"):(s=o=this.size,a=r=this.size,l=19*this.fontSize/24,c=g=0,d=this.middle,this.ctx.textBaseline="middle"),o&&r&&(this.ctx.clearRect(g,c,o,r),this.ctx.fillText(e,this.buffer,d),u=this.ctx.getImageData(g,c,o,r));var x=new Uint8ClampedArray(s*a);return function(e,i,n,s,o,a,r){a.fill(t,0,i*n),r.fill(0,0,i*n);for(var l=(i-s)/2,c=0;c<o;c++)for(var g=0;g<s;g++){var d=(c+l)*i+g+l,u=e.data[4*(c*s+g)+3]/255;if(1===u)a[d]=0,r[d]=t;else if(0===u)a[d]=t,r[d]=0;else{var h=Math.max(0,.5-u),p=Math.max(0,u-.5);a[d]=h*h,r[d]=p*p}}}(u,s,a,o,r,this.gridOuter,this.gridInner),n(this.gridOuter,s,a,this.f,this.v,this.z),n(this.gridInner,s,a,this.f,this.v,this.z),function(e,t,i,n,s,o,a){for(var r=0;r<t*i;r++){var l=Math.sqrt(n[r])-Math.sqrt(s[r]);e[r]=Math.round(255-255*(l/o+a))}}(x,s,a,this.gridOuter,this.gridInner,this.radius,this.cutoff),{data:x,metrics:{width:o,height:r,sdfWidth:s,sdfHeight:a,top:l,left:0,advance:p}}},i.prototype.draw=function(e){return this._draw(e,!1).data},i.prototype.drawWithMetrics=function(e){return this._draw(e,!0)}}}]);